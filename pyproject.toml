[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "ChimeraX"
license = "LGPL-2.1" # WHEEL ONLY
authors = [{ name = "UCSF RBVI", email = "chimerax@cgl.ucsf.edu" }]
description = "Analysis and visualization of molecular structures and 3D microscopy"
classifiers = [
  'Development Status :: 3 - Alpha',
  'Intended Audience :: Science/Research',
  'Programming Language :: Python :: 3.11',
]
requires-python = ">=3.11"
dynamic = ["version"]

[project.urls]
Home = "https://www.rbvi.ucsf.edu/chimerax/"

[project.readme]
content-type = "Markdown"
file = "README.md"

[project.optional-dependencies]
gui = [
  "openvr==1.26.701",
  "PyOpenGL==3.1.9",
  #"PyOpenGL-accelerate==3.1.9",
  # PyQt handled in prereqs/PyQt"
  # sip handled in prereqs/PyQt
  #PySide6==6.9.0
  #shiboken6==6.9.0
  "qtconsole==5.5.2",
  "qtshim==1.1",
  # Used by the DICOM bundle for a double-ended QSlider"
  "superqt==0.7.5",
  "tinyarray==1.2.5",
  "webcolors==24.11.1",
  "wheel-filename==1.4.2",
  #
  # Documentation
  #
  "blockdiag==3.0.0",
  "docutils==0.21.2",
  "Jinja2==3.1.6",
  "Pygments==2.18.0",
  "Sphinx==8.2.3",
  "sphinxcontrib-blockdiag==3.0.0",
  "sphinx_autodoc_typehints==3.1.0",
  #
  # Windows
  #
  "pywin32==310; sys_platform == 'win32'",
  "WMI==1.5.1; sys_platform == 'win32'",
  "comtypes==1.4.11; sys_platform == 'win32'",
  #
  # Linux
  #
  "distro==1.9.0; sys_platform == 'linux'",
]
wheel = [
  "appdirs==1.4.4",
  "beautifulsoup4==4.13.4",
  "colorama==0.4.6",
  "Cython==3.1.2",
  "filelock==3.18.0",
  "grako==3.16.5",
  "html2text==2024.2.26",
  "ihm==2.5",
  "imagecodecs==2024.6.1",
  # if ipython updated, make sure autocompletion still works (e.g. "mi<tab>" becomes min) and if not then
  # try a newer version of jedi
  "ipykernel==6.29.5",
  "ipython==8.26.0",
  # the version of jedi that works with ipython
  "jedi==0.19.1",
  "jupyter-client==8.6.3",
  "lxml==5.3.1",
  # lz4 4.4.4 has problems decompressing what it encoded, ticket #18140
  "lz4==4.3.2",
  "matplotlib==3.10.1",
  "msgpack==1.1.0",
  "nibabel == 5.2.0",
  "netCDF4==1.6.5",
  "networkx==3.3",
  "numpy==1.26.4",
  "openmm==8.2.0 ; platform_machine != 'aarch64'",
  "openmm-cuda-12==8.2.0 ; ((sys_platform == 'win32') or (sys_platform == 'linux')) and (platform_machine != 'aarch64')",
  "packaging==24.2",
  # as per Tristan's request in ticket #3055"
  "ParmEd==4.2.2",
  "pep517==0.13.1",
  # optional package to prevent warning in Python shell [#16571]
  "pickleshare==0.7.5",
  "Pillow==10.4.0",
  "pkginfo==1.11.1",
  "psutil==7.0.0",
  "pycollada==0.8",
  "pydicom==2.4.4",
  "pynrrd==1.0.0",
  "pyopenxr==1.1.4501",
  "tcia_utils==1.5.1",
  "python-dateutil==2.9.0.post0",
  "requests==2.32.4",
  "scipy==1.14.0",
  "six==1.17.0",
  "sortedcontainers==2.4.0",
  "tables==3.10.2",
  "tifffile==2025.3.13",
  "webcolors==24.11.1",
  "wheel-filename==1.4.2",
  "blockdiag==3.0.0",
  "docutils==0.21.2",
  "Jinja2==3.1.6",
  "Pygments==2.18.0",
  "Sphinx==8.2.3",
  "sphinxcontrib-blockdiag==3.0.0",
  "sphinx_autodoc_typehints==3.1.0",
  #
  # Windows
  #
  "pywin32==310; sys_platform == 'win32'",
  "WMI==1.5.1; sys_platform == 'win32'",
  "comtypes==1.4.11; sys_platform == 'win32'",
  #
  # Linux
  #
  "distro==1.9.0; sys_platform == 'linux'",
  #
  # Indirect dependencies listed here to pin the version number
  #
  "traitlets==5.14.3",
]
dev = ["line_profiler==5.0.0"]
test = ["pytest", "pytest-cov", "coverage"]

[tool.setuptools.dynamic]
version = { attr = "chimerax.core.__version__" }

# TODO: Generate this from bundle TOMLs
[tool.setuptools.package-data]
"*" = [
  "**/lib/**",
  "**/include/**",
  "**/*.dylib",
  "**/*.so",
  "**/*.lib",
  "**/*.a",
  "**/*.png",
  "**/icons/**",
  "**/static/**",
  "**/html/**",
  "**/dcd/**",
  "**/bin/**",
  "**/data/**",
  "**/fragments/**",
  "**/nuc-data/**",
  "**/cluts/**",
  "**/presets/**",
  "**/matrices/**",
]
"chimerax.add_charge" = ["amber_name.defattr"]
"chimerax.atom_search" = ["*.pyx"]
"chimerax.atomic" = ["*.pyx"]
"chimerax.basic_actions" = ["*.css", "*.html", "*.js"]
"chimerax.core" = ["colorbrewer.json"]
"chimerax.dunbrack_rotamer_lib" = ["*.zip"]
"chimerax.dynameomics_rotamer_lib" = ["*.zip"]
"chimerax.graphics" = ["*.txt"]
"chimerax.looking_glass" = ["*.txt"]
"chimerax.mmcif" = ["*.cpp", "*.cif"]
"chimerax.registration" = ["registration_form.html"]
"chimerax.rest_server" = ["server.pem"]
"chimerax.richardson_rotamer_lib" = ["*.zip"]
"chimerax.rna_layout" = ["rna_templates_6pj6.cif"]
"chimerax.swapaa" = ["templates.cif"]
"chimerax.toolbar" = ["tool.html"]
"chimerax.ui" = ["about.html", "splash.jpg"]
"chimerax.viewdockx" = ["*.html", "*.css", "*.js"]

[tool.pyright]
include = ["src"]
exclude = ["ChimeraX.app/**"]
ignore = ["src/bundles/**/build"]

[tool.yapf]
# All changes must be PEP8 compatible
blank_line_before_nested_class_or_def = true
column_limit = 95
dedent_closing_brackets = true
space_between_ending_comma_and_closing_bracket = false

[tool.yapfignore]
ignore_patterns = [
  ".venv",
  "ChimeraX.app",
  "build",
  "wheel",
  "docs",
  "prereqs",
  "src/bundles/**/build",
  "src/bundles/**/dist",
  "src/core/toolshed/unused",
]
[tool.pytest.ini_options]
addopts = "-rs --cache-clear --verbose --ignore=tests/test_env.py --ignore=tests/test_imports_app.py --ignore=tests/test_imports_wheel.py"
console_output_style = "count"
testpaths = [
  "tests/",
  "src/bundles/add_charge/tests",
  "src/bundles/addh/tests",
  "src/bundles/alignment_algs/tests",
  "src/bundles/alignment_headers/tests",
  "src/bundles/alphafold/tests",
  "src/bundles/altloc_explorer/tests",
  "src/bundles/amber_info/tests",
  "src/bundles/aniso/tests",
  "src/bundles/arrays/tests",
  "src/bundles/atom_search/tests",
  "src/bundles/atomic/tests",
  "src/bundles/atomic_lib/tests",
  "src/bundles/axes_planes/tests",
  "src/bundles/basic_actions/tests",
  "src/bundles/bild/tests",
  "src/bundles/blastprotein/tests",
  "src/bundles/bond_rot/tests",
  "src/bundles/bug_reporter/tests",
  "src/bundles/build_structure/tests",
  "src/bundles/bumps/tests",
  "src/bundles/buttons/tests",
  "src/bundles/cage_builder/tests",
  "src/bundles/cellpack/tests",
  "src/bundles/centroids/tests",
  "src/bundles/change_chains/tests",
  "src/bundles/check_waters/tests",
  "src/bundles/chem_group/tests",
  "src/bundles/clashes/tests",
  "src/bundles/cmd_line/tests",
  "src/bundles/color_actions/tests",
  "src/bundles/color_globe/tests",
  "src/bundles/color_key/tests",
  "src/bundles/connect_structure/tests",
  "src/bundles/core_formats/tests",
  "src/bundles/coulombic/tests",
  "src/bundles/crosslinks/tests",
  "src/bundles/crystal/tests",
  "src/bundles/crystal_contacts/tests",
  "src/bundles/data_formats/tests",
  "src/bundles/dicom/tests",
  "src/bundles/dist_monitor/tests",
  "src/bundles/dock_prep/tests",
  "src/bundles/dssp/tests",
  "src/bundles/emdb_sff/tests",
  "src/bundles/esmfold/tests",
  "src/bundles/file_history/tests",
  "src/bundles/function_key/tests",
  "src/bundles/geometry/tests",
  "src/bundles/gltf/tests",
  "src/bundles/graphics/tests",
  "src/bundles/hbonds/tests",
  "src/bundles/help_viewer/tests",
  "src/bundles/hkcage/tests",
  "src/bundles/ihm/tests",
  "src/bundles/image_formats/tests",
  "src/bundles/imod/tests",
  "src/bundles/interfaces/tests",
  "src/bundles/items_inspection/tests",
  "src/bundles/io/tests",
  "src/bundles/label/tests",
  "src/bundles/iupac/tests",
  "src/bundles/kvfinder/tests",
  "src/bundles/list_info/tests",
  "src/bundles/log/tests",
  "src/bundles/looking_glass/tests",
  "src/bundles/maestro/tests",
  "src/bundles/map/tests",
  "src/bundles/map_data/tests",
  "src/bundles/map_eraser/tests",
  "src/bundles/map_filter/tests",
  "src/bundles/map_fit/tests",
  "src/bundles/map_series/tests",
  "src/bundles/markers/tests",
  "src/bundles/mask/tests",
  "src/bundles/match_maker/tests",
  "src/bundles/mcopy/tests",
  "src/bundles/md_crds/tests",
  "src/bundles/medical_toolbar/tests",
  "src/bundles/meeting/tests",
  "src/bundles/mlp/tests",
  "src/bundles/model_series/tests",
  "src/bundles/mmcif/tests",
  "src/bundles/mmtf/tests",
  "src/bundles/model_archive/tests",
  "src/bundles/model_panel/tests",
  "src/bundles/modeller/tests",
  "src/bundles/mol2/tests",
  "src/bundles/mole/tests",
  "src/bundles/morph/tests",
  "src/bundles/mouse_modes/tests",
  "src/bundles/movie/tests",
  "src/bundles/mutation_scores/tests",
  "src/bundles/nmrstar/tests",
  "src/bundles/neuron/tests",
  "src/bundles/nifti/tests",
  "src/bundles/nrrd/tests",
  "src/bundles/nucleotides/tests",
  "src/bundles/open_command/tests",
  "src/bundles/orthopick/tests",
  "src/bundles/pdb/tests",
  "src/bundles/pdb_bio/tests",
  "src/bundles/pdb_lib/tests",
  "src/bundles/pdb_matrices/tests",
  "src/bundles/pick_blobs/tests",
  "src/bundles/positions/tests",
  "src/bundles/preset_mgr/tests",
  "src/bundles/profile_grids/tests",
  "src/bundles/pubchem/tests",
  "src/bundles/read_pbonds/tests",
  "src/bundles/registration/tests",
  "src/bundles/remote_control/tests",
  "src/bundles/render_by_attr/tests",
  "src/bundles/renumber_residues/tests",
  "src/bundles/rest_server/tests",
  "src/bundles/residue_fit/tests",
  "src/bundles/rna_layout/tests",
  "src/bundles/rotamers/tests",
  "src/bundles/rotamer_libs/Dunbrack/tests",
  "src/bundles/rotamer_libs/Dynameomics/tests",
  "src/bundles/rotamer_libs/Richardson/tests",
  "src/bundles/save_command/tests",
  "src/bundles/scheme_mgr/tests",
  "src/bundles/sdf/tests",
  "src/bundles/sel_inspector/tests",
  "src/bundles/segger/tests",
  "src/bundles/segment/tests",
  "src/bundles/segmentations/tests",
  "src/bundles/seqalign/tests",
  "src/bundles/seq_view/tests",
  "src/bundles/shape/tests",
  "src/bundles/shell/tests",
  "src/bundles/shortcuts/tests",
  "src/bundles/show_sequences/tests",
  "src/bundles/sideview/tests",
  "src/bundles/sim_matrices/tests",
  "src/bundles/similarstructures/tests",
  "src/bundles/smiles/tests",
  "src/bundles/smooth_lines/tests",
  "src/bundles/spacenavigator/tests",
  "src/bundles/std_commands/tests",
  "src/bundles/stl/tests",
  "src/bundles/storm/tests",
  "src/bundles/struct_measure/tests",
  "src/bundles/struts/tests",
  "src/bundles/surface/tests",
  "src/bundles/swapaa/tests",
  "src/bundles/swap_res/tests",
  "src/bundles/tape_measure/tests",
  "src/bundles/task_manager/tests",
  "src/bundles/test/tests",
  "src/bundles/toolbar/tests",
  "src/bundles/topography/tests",
  "src/bundles/to_quest/tests",
  "src/bundles/tug/tests",
  "src/bundles/ui/tests",
  "src/bundles/umap/tests",
  "src/bundles/uniprot/tests",
  "src/bundles/unit_cell/tests",
  "src/bundles/viewdockx/tests",
  "src/bundles/viperdb/tests",
  "src/bundles/vive/tests",
  "src/bundles/volume_menu/tests",
  "src/bundles/vrml/tests",
  "src/bundles/vtk/tests",
  "src/bundles/wavefront_obj/tests",
  "src/bundles/webcam/tests",
  "src/bundles/webservices/tests",
  "src/bundles/zone/tests/",
]
norecursedirs = [
  ".venv",
  "ChimeraX.app",
  "build",
  "wheel",
  "docs",
  "prereqs",
  "src/bundles/**/build",
  "src/bundles/**/dist",
  "src/bundles/**/src",
  "src/bundles/core/toolshed/unused",
]
markers = [
  "wheel: marks tests to run only for the PyPi wheel (deselect with '-m \"not wheel\"')",
]
### Ignore all the flake8 rules that directly contradict how
### real life actual people write code in the real world
#flake8-ignore = [
#    # Modeller script boilerplate
#    "src/bundles/modeller/src/script_head.py ALL",
#    "src/bundles/modeller/src/script_tail.py ALL",
#    # Imported but unused, star import, entity referenced after star
#    "**/__init__.py F401 F403 F405",
#    # Overhangig indent
#    "E121",
#    # Underhanging indent
#    "E126",
#    # Mandates no whitespace before comma, which is sensible, but
#    # just as it's better to have all operators aligned, it's better
#    # to have all commas aligned.
#    "E203",
#    # Mandates no spaces around keyword/parameter =
#    "E251",
#    # Mandates two spaces before inline comment
#    "E261",
#    # Mandates two blank lines between functions
#    "E302",
#    # Mandates blank line before inner function definition
#    "E306",
#    # Disallows Multiple imports on one line
#    "E401",
#	# Disallows long lines
#	"E501",
#    # Disallows bare except statement
#    "E722",
#    # Disallows breaking before binary operators as in Haskell
#    # This can be removed when flake8 is updated to consider
#    # breaking before a binary operator as the best practice
#    # (coming soon)
#    "W503",
#    # Disallows breaking after a binary operator
#    # This should be removed when W503 becomes the standard
#    "W504"
#]
