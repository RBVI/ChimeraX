// vi: set expandtab shiftwidth=4 softtabstop=4:

/*
 * === UCSF ChimeraX Copyright ===
 * Copyright 2016 Regents of the University of California.
 * All rights reserved.  This software provided pursuant to a
 * license agreement containing restrictions on its disclosure,
 * duplication and use.  For details see:
 * http://www.rbvi.ucsf.edu/chimerax/docs/licensing.html
 * This notice must be embedded in or attached to all copies,
 * including partial copies, of the software or any revisions
 * or derivations thereof.
 * === UCSF ChimeraX Copyright ===
 */

// -----------------------------------------------------------------------------
// Triangulate plane intersection with a box.
//
#include <Python.h>			// use PyObject

#include <arrays/pythonarray.h>		// use array_from_python()
#include <arrays/rcarray.h>		// Numeric_Array

static int edge_cut_count[256] = {
0,3,3,4,3,4,0,5,3,0,4,5,4,5,5,4,3,4,0,5,0,5,0,6,0,0,0,0,0,0,0,5,
3,0,4,5,0,0,0,0,0,0,5,6,0,0,0,5,4,5,5,4,0,0,0,5,0,0,0,5,0,0,0,4,
3,0,0,0,4,5,0,0,0,0,0,0,5,6,0,5,4,5,0,0,5,4,0,5,0,0,0,0,0,5,0,4,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,6,0,5,0,5,0,4,0,0,0,0,0,0,0,3,
3,0,0,0,0,0,0,0,4,0,5,0,5,0,6,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
4,0,5,0,0,0,0,0,5,0,4,5,0,0,5,4,5,0,6,5,0,0,0,0,0,0,5,4,0,0,0,3,
4,0,0,0,5,0,0,0,5,0,0,0,4,5,5,4,5,0,0,0,6,5,0,0,0,0,0,0,5,4,0,3,
5,0,0,0,0,0,0,0,6,0,5,0,5,0,4,3,4,5,5,4,5,4,0,3,5,0,4,3,4,3,3,0};

// -----------------------------------------------------------------------------
//
static int edge_cuts[256][6][2] = {
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,2},{0,1},{0,4},{0,0},{0,0},{0,0}},
{{1,3},{1,5},{1,0},{0,0},{0,0},{0,0}},
{{1,3},{1,5},{0,4},{0,2},{0,0},{0,0}},
{{2,0},{2,6},{2,3},{0,0},{0,0},{0,0}},
{{2,6},{2,3},{0,1},{0,4},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,4},{2,6},{2,3},{1,3},{1,5},{0,0}},
{{3,1},{3,2},{3,7},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{1,5},{1,0},{3,2},{3,7},{0,0},{0,0}},
{{1,5},{0,4},{0,2},{3,2},{3,7},{0,0}},
{{2,0},{2,6},{3,7},{3,1},{0,0},{0,0}},
{{2,6},{3,7},{3,1},{0,1},{0,4},{0,0}},
{{3,7},{1,5},{1,0},{2,0},{2,6},{0,0}},
{{4,0},{6,2},{7,3},{5,1},{0,0},{0,0}},
{{4,6},{4,0},{4,5},{0,0},{0,0},{0,0}},
{{0,2},{0,1},{4,5},{4,6},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,2},{1,3},{1,5},{4,5},{4,6},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,1},{4,5},{4,6},{2,6},{2,3},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{3,1},{5,1},{5,4},{6,4},{6,2},{3,2}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{5,1},{5,4},{6,4},{6,2},{7,3},{0,0}},
{{5,7},{5,4},{5,1},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{5,7},{5,4},{1,0},{1,3},{0,0},{0,0}},
{{1,3},{5,7},{5,4},{0,4},{0,2},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{1,0},{3,2},{3,7},{5,7},{5,4},{0,0}},
{{2,3},{7,3},{7,5},{4,5},{4,0},{2,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{7,3},{7,5},{4,5},{4,0},{6,2},{0,0}},
{{4,6},{4,0},{5,1},{5,7},{0,0},{0,0}},
{{4,6},{0,2},{0,1},{5,1},{5,7},{0,0}},
{{5,7},{4,6},{4,0},{1,0},{1,3},{0,0}},
{{6,4},{2,0},{3,1},{7,5},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{6,4},{6,2},{3,2},{3,1},{7,5},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{2,0},{2,3},{7,3},{7,5},{6,4},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{7,3},{7,5},{6,4},{6,2},{0,0},{0,0}},
{{6,2},{6,4},{6,7},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{6,4},{6,7},{2,3},{2,0},{0,0},{0,0}},
{{2,3},{0,1},{0,4},{6,4},{6,7},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{2,0},{6,4},{6,7},{3,7},{3,1},{0,0}},
{{7,3},{1,3},{1,0},{4,0},{4,6},{7,6}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{4,0},{4,6},{7,6},{7,3},{5,1},{0,0}},
{{4,0},{4,5},{6,7},{6,2},{0,0},{0,0}},
{{4,5},{6,7},{6,2},{0,2},{0,1},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{6,7},{2,3},{2,0},{4,0},{4,5},{0,0}},
{{7,6},{3,2},{1,0},{5,4},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{3,2},{3,1},{5,1},{5,4},{7,6},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{7,6},{7,3},{1,3},{1,0},{5,4},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{5,1},{5,4},{7,6},{7,3},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{4,0},{5,1},{5,7},{6,7},{6,2},{0,0}},
{{1,5},{7,5},{7,6},{2,6},{2,0},{1,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{7,5},{7,6},{2,6},{2,0},{3,1},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{1,0},{1,5},{7,5},{7,6},{3,2},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{7,5},{7,6},{3,2},{3,1},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{7,5},{7,6},{7,3},{0,0},{0,0},{0,0}},
{{7,3},{7,6},{7,5},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{3,1},{3,2},{7,6},{7,5},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{3,2},{7,6},{7,5},{1,5},{1,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{3,1},{2,0},{2,6},{7,6},{7,5},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{6,7},{5,7},{5,1},{0,1},{0,2},{6,2}},
{{6,2},{6,7},{5,7},{5,1},{4,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{7,3},{7,6},{5,4},{5,1},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{5,4},{1,0},{1,3},{7,3},{7,6},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{7,6},{5,4},{5,1},{3,1},{3,2},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{2,3},{6,7},{4,5},{0,1},{0,0},{0,0}},
{{4,5},{4,0},{2,0},{2,3},{6,7},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,1},{0,2},{6,2},{6,7},{4,5},{0,0}},
{{6,2},{6,7},{4,5},{4,0},{0,0},{0,0}},
{{5,1},{7,3},{7,6},{4,6},{4,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,1},{3,1},{3,7},{6,7},{6,4},{0,4}},
{{3,1},{3,7},{6,7},{6,4},{2,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{6,7},{6,4},{0,4},{0,1},{2,3},{0,0}},
{{2,0},{2,3},{6,7},{6,4},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{6,7},{6,4},{6,2},{0,0},{0,0},{0,0}},
{{6,2},{6,4},{7,5},{7,3},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{6,4},{7,5},{7,3},{2,3},{2,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{7,5},{3,1},{3,2},{6,2},{6,4},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,2},{4,6},{5,7},{1,3},{0,0},{0,0}},
{{1,3},{1,0},{4,0},{4,6},{5,7},{0,0}},
{{5,7},{5,1},{0,1},{0,2},{4,6},{0,0}},
{{5,7},{5,1},{4,0},{4,6},{0,0},{0,0}},
{{6,2},{4,0},{4,5},{7,5},{7,3},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{3,2},{0,2},{0,4},{5,4},{5,7},{3,7}},
{{5,4},{5,7},{3,7},{3,2},{1,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,2},{0,4},{5,4},{5,7},{1,3},{0,0}},
{{1,3},{1,0},{5,4},{5,7},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{5,1},{5,4},{5,7},{0,0},{0,0},{0,0}},
{{7,3},{6,2},{6,4},{5,4},{5,1},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{2,6},{4,6},{4,5},{1,5},{1,3},{2,3}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{2,3},{2,6},{4,6},{4,5},{0,1},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{4,6},{4,5},{1,5},{1,3},{0,2},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{4,6},{4,5},{0,1},{0,2},{0,0},{0,0}},
{{4,5},{4,0},{4,6},{0,0},{0,0},{0,0}},
{{2,6},{0,4},{1,5},{3,7},{0,0},{0,0}},
{{2,6},{2,0},{1,0},{1,5},{3,7},{0,0}},
{{0,4},{0,1},{3,1},{3,7},{2,6},{0,0}},
{{3,1},{3,7},{2,6},{2,0},{0,0},{0,0}},
{{3,7},{3,2},{0,2},{0,4},{1,5},{0,0}},
{{3,7},{3,2},{1,0},{1,5},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{3,7},{3,2},{3,1},{0,0},{0,0},{0,0}},
{{1,5},{1,3},{2,3},{2,6},{0,4},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
{{0,4},{0,1},{2,3},{2,6},{0,0},{0,0}},
{{2,3},{2,6},{2,0},{0,0},{0,0},{0,0}},
{{0,2},{0,4},{1,5},{1,3},{0,0},{0,0}},
{{1,0},{1,5},{1,3},{0,0},{0,0},{0,0}},
{{0,4},{0,1},{0,2},{0,0},{0,0},{0,0}},
{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}}
};

// -----------------------------------------------------------------------------
//
static void corner_depths(const float *corners, const float *axis, float *depths)
{
  for (int c = 0 ; c < 8 ; ++c)
    {
      const float *cp = corners + 3*c;
      depths[c] = cp[0]*axis[0] + cp[1]*axis[1] + cp[2]*axis[2];
    }
}

// -----------------------------------------------------------------------------
// Triangulate plane intersection with a box.  Returns the number of
// triangles.  Number of vertices is one more than number of triangles.
// Triangles form a fan from a center point.  Vertex array must be size
// at least 21 (7 vertices), and triangle array at least size 18 (6 triangles).
//
static int box_cut(const float *corners, const float *corner_depths,
                   float offset, int vbase, float *vertices, int *triangles)
{
  // Lookup which box edges are cut by plane.
  int bits = 0;
  for (int c = 0 ; c < 8 ; ++c)
    bits = (bits >> 1) | (corner_depths[c] >= offset ? 128 : 0);

  // Number of intersections with box edges.
  int n = edge_cut_count[bits];
  if (n == 0)
    return 0;

  // Determine intersection points with box edges.
  int (*ec)[2] = edge_cuts[bits];
  for (int e = 0 ; e < n ; ++e)
    {
      int v1 = ec[e][0], v2 = ec[e][1];
      float s1 = corner_depths[v1]-offset, s2 = corner_depths[v2]-offset;
      float ds = s1-s2;
      float f1 = (ds == 0 ? 0.5 : s1/ds), f2 = (ds == 0 ? 0.5 : -s2/ds);
      const float *c1 = corners +3*v1, *c2 = corners + 3*v2;
      for (int a = 0 ; a < 3 ; ++a)
	vertices[3*(e+1)+a] = f2*c1[a]+f1*c2[a];
    }

  // Add center vertex.
  float center[3] = {0,0,0};
  for (int e = 1 ; e <= n ; ++e)
      for (int a = 0 ; a < 3 ; ++a)
	center[a] += vertices[3*e+a];
  for (int a = 0 ; a < 3 ; ++a)
    center[a] /= n;
  for (int a = 0 ; a < 3 ; ++a)
    vertices[a] = center[a];

  // Create triangle fan from center.
  for (int t = 0 ; t < n ; ++t)
    {
      int *tri = triangles + 3*t;
      tri[0] = vbase;
      tri[1] = vbase + t+1;
      tri[2] = vbase + t+2;
    }
  triangles[3*n-1] = vbase + 1;

  return n;
}

// -----------------------------------------------------------------------------
//
static void box_cuts(const float *corners, const float *axis,
                     float offset, float spacing, int num_cuts,
                     float *vertices, int *nv, int *triangles, int *nt)
{
  float cdepths[8];
  corner_depths(corners, axis, cdepths);
  int ntri = 0, nvert = 0;
  for (int i = 0 ; i < num_cuts ; ++i)
    {
      float depth = offset + i*spacing;
      int n = box_cut(corners, cdepths, depth, nvert,
                      vertices + 3*nvert, triangles+3*ntri);
      if (n > 0)
	{
	  nvert += (n+1);
	  ntri += n;
	}
    }
  *nt = ntri;
  *nv = nvert;
}

// -----------------------------------------------------------------------------
//
static void offset_range(const float *corners, const float *axis,
                         float *offset_min, float *offset_max)
{
  for (int c = 0 ; c < 8 ; ++c)
    {
      const float *cp = corners + 3*c;
      float offset = cp[0]*axis[0] + cp[1]*axis[1] + cp[2]*axis[2];
      if (c == 0 || offset < *offset_min)
	*offset_min = offset;
      if (c == 0 || offset > *offset_max)
	*offset_max = offset;
    }
}

// ----------------------------------------------------------------------------
//
extern "C" PyObject *
offset_range(PyObject *, PyObject *args, PyObject *keywds)
{
  FArray carray;
  float axis[3];
  const char *kwlist[] = {"corners", "axis", NULL};
  if (!PyArg_ParseTupleAndKeywords(args, keywds, const_cast<char *>("O&O&"),
				   (char **)kwlist,
				   parse_float_n3_array, &carray,
				   parse_float_3_array, &axis[0]))
    return NULL;

  if (carray.size(0) != 8)
    {
      PyErr_Format(PyExc_TypeError, "Corner array must be size 8, got %s",
		   carray.size_string(0).c_str());
      return NULL;
    }

  FArray corners = carray.contiguous_array();
  float offset_min, offset_max;
  offset_range(corners.values(), axis, &offset_min, &offset_max);

  return python_tuple(PyFloat_FromDouble(offset_min), PyFloat_FromDouble(offset_max));
}

// ----------------------------------------------------------------------------
//
extern "C" PyObject *
box_cuts(PyObject *, PyObject *args, PyObject *keywds)
{
  FArray carray, vertices;
  IArray triangles;
  float axis[3], offset, spacing;
  int num_cuts;
  const char *kwlist[] = {"corners", "axis", "offset", "spacing", "num_cuts",
                          "vertices", "triangles", NULL};
  if (!PyArg_ParseTupleAndKeywords(args, keywds, const_cast<char *>("O&O&ffi|O&O&"),
				   (char **)kwlist,
				   parse_float_n3_array, &carray,
				   parse_float_3_array, &axis[0],
                                   &offset, &spacing, &num_cuts,
                                   parse_writable_float_n3_array, &vertices,
                                   parse_writable_int_n3_array, &triangles))
    return NULL;

  if (carray.size(0) != 8)
    {
      PyErr_Format(PyExc_TypeError, "Corner array must be size 8, got %s",
		   carray.size_string(0).c_str());
      return NULL;
    }

  if (vertices.dimension() == 2 && vertices.size(0) < 7*num_cuts)
    {
      PyErr_Format(PyExc_TypeError,
                   "Vertex array must be at least size 7 * num_cuts (%d) = %d, got %s",
                   num_cuts, 7*num_cuts, vertices.size_string(0).c_str());
      return NULL;
    }

  if (triangles.dimension() == 2 && triangles.size(0) < 6*num_cuts)
    {
      PyErr_Format(PyExc_TypeError,
                   "Triangle array must be at least size 6 * num_cuts (%d) = %d, got %s",
                   num_cuts, 6*num_cuts, triangles.size_string(0).c_str());
      return NULL;
    }

  // Get vertex float array or create it.
  bool alloc_vertices = (vertices.dimension() == 0);
  float *va = (alloc_vertices ? new float[num_cuts*7*3] : vertices.values());

  // Get triangle int array or create it.
  bool alloc_triangles = (triangles.dimension() == 0);
  int *ta = (alloc_triangles ? new int[num_cuts*6*3] : triangles.values());

  // Calculate triangulation.
  FArray corners = carray.contiguous_array();
  int nv, nt;
  box_cuts(corners.values(), axis, offset, spacing, num_cuts, va, &nv, ta, &nt);

  // Return vertex array with correct size.
  PyObject *v;
  if (alloc_vertices)
    {
      v = c_array_to_python(va, nv, 3);
      delete [] va;
    }
  else
    {
      PyObject *vpy = array_python_source(vertices);
      v = resized_2d_array(vpy, nv, 3);
    }

  // Return triangle array with correct size.
  PyObject *t;
  if (alloc_triangles)
    {
      t = c_array_to_python(ta, nt, 3);
      delete [] ta;
    }
  else
    {
      PyObject *tpy = array_python_source(triangles);
      t = resized_2d_array(tpy, nt, 3);
    }

  return python_tuple(v, t);
}
