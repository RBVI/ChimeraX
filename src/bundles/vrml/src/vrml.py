# vim: set expandtab shiftwidth=4 softtabstop=4:

# === UCSF ChimeraX Copyright ===
# Copyright 2022 Regents of the University of California. All rights reserved.
# The ChimeraX application is provided pursuant to the ChimeraX license
# agreement, which covers academic and commercial uses. For more details, see
# <http://www.rbvi.ucsf.edu/chimerax/docs/licensing.html>
#
# This particular file is part of the ChimeraX library. You can also
# redistribute and/or modify it under the terms of the GNU Lesser General
# Public License version 2.1 as published by the Free Software Foundation.
# For more details, see
# <https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html>
#
# THIS SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
# EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. ADDITIONAL LIABILITY
# LIMITATIONS ARE DESCRIBED IN THE GNU LESSER GENERAL PUBLIC LICENSE
# VERSION 2.1
#
# This notice must be embedded in or attached to all copies, including partial
# copies, of the software or any revisions or derivations thereof.
# === UCSF ChimeraX Copyright ===

"""
vrml: Write basic VRML for 3D printing
======================================
"""

# -----------------------------------------------------------------------------
#
from chimerax.core.models import Surface
class VRMLModel(Surface):
    SESSION_SAVE_DRAWING = True
    clip_cap = True

# -----------------------------------------------------------------------------
#
def write_vrml(session, filename, models = None,
               center = True, size = None, backface_culling = False):

    if models is None:
        models = session.models.list()

    geom_list = models_geometry(models)

    if center or size is not None:
        center_and_size(models, geom_list, center, size)

    with open(filename, 'w') as file:
        file.write(vrml_string(geom_list, backface_culling))

# -----------------------------------------------------------------------------
#
def vrml_string(geom_list, backface_culling):

    template = \
'''#VRML V2.0 utf8

# Generated by ChimeraX <<version>>

NavigationInfo {
  type [ "EXAMINE", "ANY" ]
}

Transform {
  scale 1 1 1
  translation 0 0 0

  children
  [
    Shape
    {
      geometry IndexedFaceSet
      {
        creaseAngle .5
        solid <<solid>>
        coord Coordinate
        {
          point
          [
            <<vertices>>
          ]
        }
        color Color
        {
          color
          [
            <<colors>>
          ]
        }
        coordIndex
        [
          <<triangles>>
        ]
      }
      appearance Appearance
      {
        material Material
        {
	       ambientIntensity <<ambient_intensity>>
	       diffuseColor <<diffuse_color>>
	       specularColor <<specular_color>>
	       shininess <<shininess>>
	       transparency <<transparency>>
        }
      }
    }
  ]
}
'''

    # Escape curly brackets
    template = template.replace('{', '{{').replace('}', '}}').replace('<<', '{').replace('>>', '}')

    from chimerax.core import __version__ as version
    solid = 'TRUE' if backface_culling else 'FALSE'
    from chimerax.surface import combine_geometry_vtc
    v,t,c = combine_geometry_vtc(geom_list)
    vertices = ',\n'.join(', '.join('%.6g %.6g %.6g' % (x,y,z) for x,y,z in v[i:i+4])
                        for i in range(0, len(v), 4))
    colors = ',\n'.join(', '.join('%.6g %.6g %.6g' % (r/255,g/255,b/255) for r,g,b in c[i:i+4,:3])
                      for i in range(0, len(c), 4))
    triangles = ',\n'.join(', '.join('%d,%d,%d,-1' % (v1,v2,v3) for v1,v2,v3 in t[i:i+6])
                         for i in range(0, len(t), 6))
    if len(c) > 0 and (c[:,3] == c[0,3]).all():
        transparency = '%.6g' % ((255-c[0,3])/255)
    else:
        transparency = '0'
    vrml = template.format(version = version, solid = solid,
                           vertices = vertices, colors = colors, triangles = triangles,
                           ambient_intensity = '0.2', diffuse_color = '0.9 0.9 0.9',
	                   specular_color = '.1 .1 .1', shininess = '.5', transparency = transparency)
    return vrml
        
# -----------------------------------------------------------------------------
#
def center_and_size(models, geom_list, center, size):
    from chimerax.geometry import union_bounds
    bounds = union_bounds(m.bounds() for m in models if m.visible)
    if bounds is None:
        return
    if center:
        c = bounds.center()
        for (v,vc,t) in geom_list:
            v -= c
    if size is not None:
        s = max(bounds.size())
        scale = size / s
        for (v,vc,t) in geom_list:
            v *= scale

# -----------------------------------------------------------------------------
#
def models_geometry(models):
    drawings = all_visible_drawings(models)
    geom_list = [drawing_geometry(d) for d in drawings]
    return geom_list

# -----------------------------------------------------------------------------
# Collect all drawings including descendants of specified models, excluding
# ones that show no triangles.
#
def all_visible_drawings(models):
    drawings = set()
    for m in models:
        if m.visible and m not in drawings:
            for d in m.all_drawings(displayed_only = True):
                if d.num_masked_triangles > 0:
                    drawings.add(d)
    return tuple(drawings)

# -----------------------------------------------------------------------------
#
def drawing_geometry(drawing):
    v = drawing.vertices.copy()
    vc = drawing.vertex_colors
    t = drawing.masked_triangles

    # Expand instancing and create vertex colors if needed.
    positions = drawing.get_scene_positions(displayed_only = True)
    if len(positions) == 1:
        p = positions[0]
        if not p.is_identity():
            p.transform_points(v, in_place = True)
        if vc is None:
            vc = single_vertex_color(len(v), drawing.color)
    else:
        dpositions = drawing.get_positions(displayed_only = True)
        instance_colors = drawing.get_colors(displayed_only = True)
        v, vc, t = combine_instance_geometry(v, vc, t, dpositions, instance_colors)
        ppositions = drawing.parent.get_scene_positions(displayed_only = True)
        if len(ppositions) == 1:
            pp = ppositions[0]
            if not pp.is_identity():
                pp.transform_points(v, in_place = True)
        else:
            v, vc, t = combine_instance_geometry(v, vc, t, ppositions, None)
    return v, t, vc

# -----------------------------------------------------------------------------
#
def combine_instance_geometry(va, vc, ta, places, instance_colors):
    v = []
    c = []
    t = []
    offset = 0
    for i,p in enumerate(places):
        v.append(p*va)
        if vc is None:
            ivc = single_vertex_color(len(va), instance_colors[i])
            c.append(ivc)
        else:
            c.append(vc)
        t.append(ta+offset)
        offset += len(va)

    from numpy import concatenate
    cva, cca, cta = concatenate(v), concatenate(c), concatenate(t)
    
    return cva, cca, cta

# -----------------------------------------------------------------------------
#
def single_vertex_color(n, color):
    from numpy import empty, uint8
    vc = empty((n,4), uint8)
    vc[:] = color
    return vc
