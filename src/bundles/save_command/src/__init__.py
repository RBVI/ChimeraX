# vim: set expandtab shiftwidth=4 softtabstop=4:

# === UCSF ChimeraX Copyright ===
# Copyright 2022 Regents of the University of California. All rights reserved.
# The ChimeraX application is provided pursuant to the ChimeraX license
# agreement, which covers academic and commercial uses. For more details, see
# <http://www.rbvi.ucsf.edu/chimerax/docs/licensing.html>
#
# This particular file is part of the ChimeraX library. You can also
# redistribute and/or modify it under the terms of the GNU Lesser General
# Public License version 2.1 as published by the Free Software Foundation.
# For more details, see
# <https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html>
#
# THIS SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
# EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. ADDITIONAL LIABILITY
# LIMITATIONS ARE DESCRIBED IN THE GNU LESSER GENERAL PUBLIC LICENSE
# VERSION 2.1
#
# This notice must be embedded in or attached to all copies, including partial
# copies, of the software or any revisions or derivations thereof.
# === UCSF ChimeraX Copyright ===

class SaverInfo:
    """
    Bundles that can save files must implement a subclass of this class, and return it
    as the value of the bundle's :py:meth:`~chimerax.core.toolshed.BundleAPI.run_provider` method.
    The subclass must override the :py:meth:`save` method of this class.
    """
    def save(self, session, path, **kw):
        """
        Save a file to the given file-system path.

        The 'kw' dictionary will contain keywords specific to your type of save function.
        Their names and types are specified by the :py:meth:`save_args` property.
        """
        raise NotImplementedError("Saver did not implement mandatory 'save' method")

    @property
    def save_args(self):
        """
        Return a dictionary that maps **Python** keywords used by your :py:meth:`save` function to
        corresponding :ref:`Annotation <Type Annotations>` subclasses. Annotations are used to
        convert command-line text typed by the user into appropriate Python values, *e.g.*
        :py:class:`~chimerax.core.commands.cli.BoolArg` would convert 't' to True.
        Some bundles also provide relevant Annotations, *e.g.*
        :py:class:`chimerax.atomic.AtomsArg <chimerax.atomic.args.AtomsArg>`.

        If your bundle includes a "models" keyword in the returned dictionary, it is handled specially
        in that the user can not only specify it normally in the `save` command (*e.g.*
        ``save out.pdb models #1``) but as a convenience it can instead be specified as the second
        positional argument (*e.g.* ``save out.pdb #1``).
        """
        return {}

    @property
    def hidden_args(self):
        """
        Return a list of Python keyword argument names that should not be shown in the command's
        "usage" information.  Sometimes used to hide debugging or obsolete options.
        """
        return []

    def save_args_widget(self, session):
        """
        Return a `Qt <https://www.qt.io>`_ widget that can be displayed in ChimeraX's Save dialog
        to provide control over options generated for the resulting ``save`` command.  This is
        frequently a subclass of `QFrame <https://doc.qt.io/qt-5/qframe.html>`_.
        Not all possible option need be provided for by the widget -- infrequently used
        or obscure options are often omitted (the command version of ``save`` can still be used
        to get to those options).  The argument string corresponding
        to the final widget settings is generated by the :py:meth:`save_args_string_from_widget`
        method.

        If this method returns None, then no options will be displayed for this format.
        """
        return None

    def save_args_string_from_widget(self, widget):
        """
        This method must be overidden if the :py:meth:`save_args_widget` method returns
        a widget (rather than None).  Given that widget, this method should return the
        corresponding arguments string to add to the ``save`` command. The string should only
        include the text for the arguments.  The entire command text, including "save", filename,
        format, etc. will be generated by the calling function.

        The conversion of a Python value to a string can be accomplished by using the corresponding
        :ref:`Annotation <Type Annotations>`'s
        :py:meth:`~chimerax.core.commands.cli.Annotation.unparse`
        method.  This will handle things like putting quotes around a space-containg string,
        generating a text representation of a color, *etc.*, and generally avoids you having
        to re-invent the wheel.

        If your bundle does not implement :py:meth:`save_args_widget` (i.e. that method returns
        None), then you do not need to implement this method either.
        """
        raise NotImplementedError("Saver did not implement 'save_args_string_from_widget' method")

    @property
    def in_file_history(self):
        """
        Set this to False in the rare case that the file should not appear in the file history.
        Note that saved files that ChimeraX does not know how to open are automatically excluded
        from the file history, so only files that are in a format that ChimeraX knows how to open
        but that would not be appropriate to open need to be excluded by setting this to False.
        """
        return True

from .manager import NoSaverError
from .dialog import show_save_file_dialog

from chimerax.core.toolshed import BundleAPI
class _OpenBundleAPI(BundleAPI):

    @staticmethod
    def init_manager(session, bundle_info, name, **kw):
        """Initialize save-command manager"""
        if session.ui.is_gui:
            from . import dialog
            session.ui.triggers.add_handler('ready',
                lambda *args, ses=session: dialog.create_menu_entry(ses))
        from . import manager
        session.save_command = manager.SaveManager(session, name)

    @staticmethod
    def register_command(command_name, logger):
        from . import cmd
        cmd.register_command(command_name, logger)

bundle_api = _OpenBundleAPI()
