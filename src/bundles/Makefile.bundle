# The "make" targets are:
# 	wheel: build a Python wheel in "dist" directory.
# 	install: build wheel (if needed) and install in ChimeraX.
# 	sync: squirrel away wheel
# 	build: make wheel and sync
# 	test: run ChimeraX
# 	debug: run ChimeraX with debugging flag set
# 	clean: remove files used in building wheel

TOP ?= ../../..
-include $(TOP)/.makerc
CHIMERAX_APP = $(wildcard $(TOP)/ChimeraX*.app)
SYNC_DIR = $(wildcard $(TOP)/build/sync)

# These can be overridden by bundles for customization
BUILD_ARGS ?=
INSTALL_ARGS ?=
CLEAN ?= build dist *.egg-info src/__pycache__ src/*/__pycache__
CLEAN_ALWAYS ?=

ifdef DEBUG
DEBUG_ARG += debug true
endif

# Platform-dependent settings.  Should not need fixing.
# For Windows, we assume Cygwin is being used.
OS=$(shell uname -s)
ifeq ($(filter $(OS),Darwin Linux),)
OS=$(shell uname -o)
ifneq ($(filter $(OS),Cygwin Msys),)
OS=Windows
endif
endif
ifeq ($(OS),Windows)
APP_PYTHON_EXE = $(CHIMERAX_APP)/bin/python.exe -I
CX_BIN = $(CHIMERAX_APP)/bin/ChimeraX-console.exe
PYMOD_EXT = pyd
endif
ifeq ($(OS),Darwin)
APP_PYTHON_EXE = $(CHIMERAX_APP)/Contents/bin/python3.9 -I
CX_BIN = $(CHIMERAX_APP)/Contents/bin/ChimeraX
PYMOD_EXT = so
endif
ifeq ($(OS),Linux)
APP_PYTHON_EXE = $(CHIMERAX_APP)/bin/python3.9 -I
CX_BIN = $(CHIMERAX_APP)/bin/chimerax
PYMOD_EXT = so
endif
CHIMERAX_EXE = $(APP_PYTHON_EXE) -m chimerax.core
RUN = PYTHONNOUSERSITE=1 $(CHIMERAX_EXE) --nogui --safemode --exit --cmd

ifdef INSTALL_TO_VENV
WHEEL = $(wildcard dist/*.whl)
endif

PYSRCS = $(wildcard src/*.py)
# Some bundles (e.g. chem_group) need to add to PYSRCS
.SECONDEXPANSION:

wheel: $$(PYSRCS)
	$(RUN) "devel build . exit true $(DEBUG_ARG) $(BUILD_ARGS)"

# The space means install and app-install are the same
install app-install: $$(PYSRCS)
	$(RUN) "devel install . user false exit true $(DEBUG_ARG) $(INSTALL_ARGS)"

install-editable: 
	$(RUN) "devel install . user false editable true exit true $(DEBUG_ARG) $(INSTALL_ARGS)"

venv-install:
ifndef VIRTUAL_ENV
	@echo "No virtual env to install to! Skipping venv install."
else
ifdef IGNORE_DEPS
	pip install $(WHEEL) --no-deps
else
	pip install $(WHEEL)
endif
endif

test-changes: install
ifeq ($(OS),Darwin)
# -n flag means open a new instance even if another already exists
	open -n $(CHIMERAX_APP)
endif
ifeq ($(OS),Linux)
	nohup ./$(CHIMERAX_EXE) >> /dev/null & 2>&1
endif

sync:
	rsync -av dist/*.whl $(SYNC_DIR)

ifdef BUILD_AND_INSTALL
INSTALL_ARGS = noDeps true
build: install
else
build: wheel
endif
	$(MAKE) sync

test:
	for t in $(wildcard cxtest*.cxc) $(wildcard cxtest*.py);\
		do $(CHIMERAX_EXE) --exit --nogui $$t;\
	done

debug:
	$(CHIMERAX_EXE) --debug

clean:
	if [ -x $(CX_BIN) -a -e bundle_info.xml ]; then \
		$(RUN) "devel clean . exit true" ; \
	else \
		rm -rf $(CLEAN) ; \
	fi
	if [ -n "$(CLEAN_ALWAYS)" ]; then \
		rm -rf $(CLEAN_ALWAYS); \
	fi

pylint:
	$(CHIMERAX_EXE) -m flake8 $(filter %.py, $(PYSRCS))

test-pyproject-converter:
	$(MAKE) -C $(TOP) $@
