There are multiple layers to supporting external services:

- ChimeraX interface: command line, GUI.
- Services: APBS, PDB2PQR, BLAST.
- Invocation methods: ChimeraX REST web service, local execution, and
  web services hosted at other sites (like NBCR Opal).

Let's consider a single ChimeraX bundle providing access to a single
service, but supporting multiple inocation methods.  (This is what
Chimera supported.)  Obviously, a bundle *can* provide access to
multiple services, but the implementation would be essentially
applying the same design multiple times.

Preconditions:

- At the bundle layer, the command or graphical user interface collects
  a set of parameters appropriate for its service.
- The bundle would need to know how to use each invocation method for
  launching an external job.
- We do not want to reimplement common parts of the invocation method.
  For example, uploading data files and fetching output files.

Design

- At the bundle user interface layer, service parameters are collected
  into a single dictionary.  This keeps the user interface code from
  having to know about multiple invocation methods.
- At the invocation method layer (WebServices bundle), each invocation
  method has an associated class that implements the commonly used
  operations that are independent of service.
- The bundle will need to implement a glue class that accepts the
  service parameter dictionary and starts and monitors the external
  service job, using the WebServices class for the user-selected
  invocation method.
- The WebServices bundle should include GUI elements for selecting
  invocation methods to help simplify bundle GUI implementation.
  With PyQt5, the GUI can be a single embeddable panel/frame;
  with HTML, it can be an HTML fragment.
