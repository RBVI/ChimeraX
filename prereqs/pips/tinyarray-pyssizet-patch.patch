From 247181deba48e44581cfe3e6f1e3248646ab7626 Mon Sep 17 00:00:00 2001
From: Anton Akhmerov <anton.akhmerov@gmail.com>
Date: Wed, 22 Dec 2021 14:14:22 +0100
Subject: [PATCH] use Py_ssize_t everywhere

ssize_t is not guaranteed to be defined on non-POSIX platforms
---
 src/array.cc | 2 +-
 src/array.hh | 4 ++--
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/array.cc b/src/array.cc
index 1742e7e..3de04e7 100644
--- a/src/array.cc
+++ b/src/array.cc
@@ -459,7 +459,7 @@ T (*get_buffer_converter(Py_buffer *view))(const void *)
     case 'Q':
         return number_from_ptr<T, unsigned long long>;
     case 'n':
-        return number_from_ptr<T, ssize_t>;
+        return number_from_ptr<T, Py_ssize_t>;
     case 'N':
         return number_from_ptr<T, size_t>;
     case 'f':
diff --git a/src/array.hh b/src/array.hh
index 1ebc3d2..a7e2ba5 100644
--- a/src/array.hh
+++ b/src/array.hh
@@ -105,7 +105,7 @@ public:
         }
     }
 
-    ssize_t object_size() const;
+    Py_ssize_t object_size() const;
 
     static bool check_exact(PyObject *candidate) {
         return (Py_TYPE(candidate) == &pytype);
@@ -160,7 +160,7 @@ int coerce_to_arrays(PyObject **a, PyObject **b, Dtype *coerced_dtype);
 template <typename T> PyObject *transpose(PyObject *in, PyObject *dummy);
 
 template <typename T>
-ssize_t Array<T>::object_size() const
+Py_ssize_t Array<T>::object_size() const
 {
     int ndim;
     size_t *shape;
-- 
GitLab

