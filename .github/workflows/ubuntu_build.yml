name: Build ChimeraX for Ubuntu
on:
  workflow_call:
    inputs:
      release_type:
        type: string
        required: true
      branch:
        type: string
        required: false
    secrets:
      PREBUILT_CACHE_SECRET:
        required: true

jobs:
  build-ubuntu:
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04]
    env:
      PYOPENGL_PLATFORM: egl
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch || 'develop' }}
      - run: sudo apt-get update && sudo apt-get upgrade -y && ${PWD}/utils/set_up_ubuntu.sh
      - name: Fetch Plato prerequisites
        uses: ./utils/ci/consolidated_cache
        with:
          platform: linux
          architecture: x86_64
          cache_key: ${{ secrets.PREBUILT_CACHE_SECRET }}
      - uses: Tiryoh/gha-jobid-action@v1
        id: get_job_id
        if: ${{ inputs.release_type == 'daily' || inputs.release_type == 'candidate' }}
        with:
          job_name: ${{ format('Build ChimeraX for Ubuntu ({0}, {1}) / build-ubuntu ({2})', inputs.branch, inputs.release_type, matrix.os) }}
      - name: Note the run and job IDs on Plato
        if: ${{ inputs.release_type == 'daily' || inputs.release_type == 'candidate' }}
        uses: nick-fields/retry@v3
        with:
          # You're gonna do it until you succeed, <REDACTED>! I'm not watching one more build fail because
          # GitHub Actions couldn't contact Plato.
          max_attempts: 1000
          timeout_seconds: 60
          command: ./utils/ci/nightly_logs.sh ${{ secrets.PREBUILT_CACHE_SECRET }} ${{ github.run_id }} ${{ steps.get_job_id.outputs.job_id }} ${{matrix.os}} ${{ inputs.release_type }}
      - name: Restore bundles and includes from cache
        uses: actions/cache/restore@v4
        with:
          path: |
            linux-bundles.tar.gz
            linux-include.tar.gz
          key: linux-bundles-${{ inputs.release_type }}-${{ github.sha }}
      - name: Unpack the bundles tarball to wheels
        run: |
          mkdir wheels
          tar -xvf linux-bundles.tar.gz -C wheels
      - name: Unpack the include tarball to include
        run: |
          tar -xvf linux-include.tar.gz
      - name: Build the rest of ChimeraX
        run: |
          make build-dirs
          MAKEOPTS="-j$(nproc)" NO_PREBUILT=1 BUILD_TYPE="${{ inputs.release_type }}" PYQT_LICENSE=commercial make -j$(nproc) -C prereqs install
          MAKEOPTS="-j$(nproc)" NO_PREBUILT=1 BUILD_TYPE="${{ inputs.release_type }}" PYQT_LICENSE=commercial make -j$(nproc) -C prereqs app-install
          make -C src/apps/ChimeraX install BUILD_TYPE="${{ inputs.release_type }}"
          MAKEOPTS="-j$(nproc)" NO_PREBUILT=1 BUILD_TYPE="${{ inputs.release_type }}" PYQT_LICENSE=commercial make -j$(nproc) install-common-wheels
          cp -rp include ChimeraX.app
          make -C src/apps install BUILD_TYPE="${{ inputs.release_type }}"
          make -C docs install BUILD_TYPE="${{ inputs.release_type }}"
      - name: Install Pytest
        run: USE_COVERAGE=1 make pytest-install
      - name: Set up the repo for coverage reporting
        run: make prepare-coverage
      - name: Check whether ChimeraX.exe and python -m chimerax.core are equivalent
        run: USE_COVERAGE=1 make pytest-both-exes
      - name: Run wheel tests
        run: USE_COVERAGE=1 make pytest-wheel
      - name: Run distribution tests
        run: USE_COVERAGE=1 make pytest-app
      - name: Report coverage
        run: make report-coverage
      - name: Make the package
        run: make -f Makefile.ubuntu ${{ inputs.release_type }}-package
      - run: mv ${{ matrix.os }}/ucsf-chimerax-*.deb ./chimerax.deb
      - name: Put the build date and commit in the environment
        run: |
          export BUILD_COMMIT=$(git rev-parse --short $GITHUB_SHA)
          export BUILD_DATE=$(git show $(git rev-parse $GITHUB_SHA) --no-patch --no-notes --pretty='%cd' | date -u)
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          echo "BUILD_COMMIT=$BUILD_COMMIT" >> $GITHUB_ENV
      - name: Upload ChimeraX
        uses: nick-fields/retry@v3
        with:
          # You're gonna do it until you succeed, <REDACTED>! I'm not watching one more build fail because
          # GitHub Actions couldn't contact Plato.
          max_attempts: 1000
          timeout_minutes: 60
          command: curl -v -F "key=${{ secrets.PREBUILT_CACHE_SECRET }}" -F "commit=$BUILD_COMMIT" -F "date=$BUILD_DATE" -F "platform=${{ matrix.os }}" -F "build_type=${{ inputs.release_type }}" -F "file=@$GITHUB_WORKSPACE/chimerax.deb" https://preview.rbvi.ucsf.edu/chimerax/cgi-bin/upload_build.py
