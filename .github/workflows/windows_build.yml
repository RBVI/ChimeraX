name: Build ChimeraX for Windows
on:
  workflow_call:
    inputs:
      release_type:
        type: string
        required: true
      branch:
        type: string
        required: false
    secrets:
      PREBUILT_CACHE_SECRET:
        required: true
      WINDOWS_SIGNING_CERT:
        required: true
      WINDOWS_SIGNING_PASS:
        required: true

jobs:
  build-test:
    name: Windows Build
    if: ${{ inputs.release_type == 'test' }}
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v4
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: git mingw-w64-x86_64-imagemagick mingw-w64-x86_64-binutils mingw-w64-x86_64-gcc mingw-w64-x86_64-gcc-objc mingw-w64-x86_64-gcc-fortran rsync patch unzip openssh make mingw-w64-x86_64-autotools mingw-w64-x86_64-jq
      - run: AUTOMATIC_DISCOVERY=1 . ./vsvars.sh && MAKEOPTS="-j$(nproc)" make -j$(nproc) build-minimal
      - name: Run the legacy test suite
        run: AUTOMATIC_DISCOVERY=1 . ./vsvars.sh && make test
      - name: Install Pytest
        run: ./ChimeraX.app/bin/python.exe -I -m pip install pytest pytest-cov
      - name: Set up the repo for coverage reporting
        run: make prepare-coverage
      - name: Check whether ChimeraX.exe and python -m chimerax.core are equivalent
        run: USE_COVERAGE=1 make pytest-both-exes
      - name: Run wheel tests
        run: USE_COVERAGE=1 make pytest-wheel
      - name: Run distribution tests
        run: USE_COVERAGE=1 make pytest-app
      - name: Report coverage
        run: make report-coverage
  build-daily:
    name: Daily
    if: ${{ inputs.release_type == 'daily' }}
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch || 'develop' }}
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: git mingw-w64-x86_64-imagemagick mingw-w64-x86_64-binutils mingw-w64-x86_64-gcc mingw-w64-x86_64-gcc-objc mingw-w64-x86_64-gcc-fortran rsync patch unzip openssh make mingw-w64-x86_64-autotools
      - name: Fetch Plato prerequisites
        uses: ./utils/ci/consolidated_cache
        with:
          platform: windows
          architecture: x86_64
          cache_key: ${{ secrets.PREBUILT_CACHE_SECRET }}
      - uses: Tiryoh/gha-jobid-action@v1
        id: get_job_id
        if: ${{ inputs.release_type == 'daily' || inputs.release_type == 'candidate' }}
        with:
          job_name: ${{ format('Build ChimeraX for Windows ({0}, {1}) / Daily', inputs.branch, inputs.release_type) }}
      - name: Note the run and job IDs on Plato
        if: ${{ inputs.release_type == 'daily' || inputs.release_type == 'candidate' }}
        uses: nick-fields/retry@v3
        with:
          # You're gonna do it until you succeed, <REDACTED>! I'm not watching one more build fail because
          # GitHub Actions couldn't contact Plato.
          max_attempts: 1000 
          timeout_seconds: 60
          command: ./utils/ci/nightly_logs.sh ${{ secrets.PREBUILT_CACHE_SECRET }} ${{ github.run_id }} ${{ steps.get_job_id.outputs.job_id }} windows ${{ inputs.release_type }}
      - run: AUTOMATIC_DISCOVERY=1 . ./vsvars.sh && MAKEOPTS="-j$(nproc)" make -j$(nproc) install-rbvi
      - name: Run the legacy test suite
        run: AUTOMATIC_DISCOVERY=1 . ./vsvars.sh && make test
      - name: Install Pytest
        run: ./ChimeraX.app/bin/python.exe -I -m pip install pytest pytest-cov
      - name: Set up the repo for coverage reporting
        run: make prepare-coverage
      - name: Check whether ChimeraX.exe and python -m chimerax.core are equivalent
        run: USE_COVERAGE=1 make pytest-both-exes
      - name: Run wheel tests
        run: USE_COVERAGE=1 make pytest-wheel
      - name: Run distribution tests
        run: USE_COVERAGE=1 make pytest-app
      - name: Report coverage
        run: make report-coverage
      - name: Copy scripts into the package
        run: |
          cp utils/build/windows/remove_pycache.py ChimeraX.app/bin/
      - name: Sign the Windows Package
        uses: ./utils/ci/sign_windows
        with:
          build_certificate: ${{ secrets.WINDOWS_SIGNING_CERT }}
          cert_password: ${{ secrets.WINDOWS_SIGNING_PASS }}
      - name: Upload ChimeraX
        uses: ./utils/ci/upload_artifact
        with:
          artifact_path: chimerax-installer.exe
          full_build: true
          release_type: ${{ inputs.release_type }}
          platform: windows
          deploy_key: ${{ secrets.PREBUILT_CACHE_SECRET }}
  build-candidate:
    name: Candidate
    if: ${{ inputs.release_type == 'candidate' }}
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch || 'develop' }}
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: git mingw-w64-x86_64-imagemagick mingw-w64-x86_64-binutils mingw-w64-x86_64-gcc mingw-w64-x86_64-gcc-objc mingw-w64-x86_64-gcc-fortran rsync patch unzip openssh make mingw-w64-x86_64-autotools
      - name: Fetch PyQt6 and PyQt6-WebEngine from Plato
        uses: ./utils/ci/cache_pyqt
        with:
          platform: windows
          architecture: x86
          cache_key: ${{ secrets.PREBUILT_CACHE_SECRET }}
      - uses: ./utils/ci/cache_mmtf/
      - run: AUTOMATIC_DISCOVERY=1 . ./vsvars.sh && MAKEOPTS="-j$(nproc)" make -j$(nproc) install-rbvi
      - name: Run the legacy test suite
        run: AUTOMATIC_DISCOVERY=1 . ./vsvars.sh && make test
      - name: Install Pytest
        run: ./ChimeraX.app/bin/python.exe -I -m pip install pytest pytest-cov
      - name: Set up the repo for coverage reporting
        run: make prepare-coverage
      - name: Check whether ChimeraX.exe and python -m chimerax.core are equivalent
        run: USE_COVERAGE=1 make pytest-both-exes
      - name: Run wheel tests
        run: USE_COVERAGE=1 make pytest-wheel
      - name: Run distribution tests
        run: USE_COVERAGE=1 make pytest-app
      - name: Report coverage
        run: make report-coverage
      - name: Copy scripts into the package
        run: |
          cp utils/build/windows/remove_pycache.py ChimeraX.app/bin/
      - name: Sign the Windows Package
        uses: ./utils/ci/sign_windows
        with:
          build_certificate: ${{ secrets.WINDOWS_SIGNING_CERT }}
          cert_password: ${{ secrets.WINDOWS_SIGNING_PASS }}
      - name: Upload ChimeraX
        uses: ./utils/ci/upload_artifact
        with:
          artifact_path: chimerax-installer.exe
          full_build: true
          release_type: ${{ inputs.release_type }}
          platform: windows
          deploy_key: ${{ secrets.PREBUILT_CACHE_SECRET }}
  build-techpreview:
    name: Preview
    if: ${{ inputs.release_type == 'techpreview' }}
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch || 'develop' }}
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: git mingw-w64-x86_64-imagemagick mingw-w64-x86_64-binutils mingw-w64-x86_64-gcc mingw-w64-x86_64-gcc-objc mingw-w64-x86_64-gcc-fortran rsync patch unzip openssh make mingw-w64-x86_64-autotools
      - name: Fetch Plato prerequisites
        uses: ./utils/ci/consolidated_cache
        with:
          platform: windows
          architecture: x86_64
          cache_key: ${{ secrets.PREBUILT_CACHE_SECRET }}
      - run: AUTOMATIC_DISCOVERY=1 . ./vsvars.sh && MAKEOPTS="-j$(nproc)" BUILD_TYPE=techpreview make -j$(nproc) install-rbvi
      - name: Run the legacy test suite
        run: AUTOMATIC_DISCOVERY=1 . ./vsvars.sh && make test
      - name: Install Pytest
        run: ./ChimeraX.app/bin/python.exe -I -m pip install pytest pytest-cov
      - name: Set up the repo for coverage reporting
        run: make prepare-coverage
      - name: Check whether ChimeraX.exe and python -m chimerax.core are equivalent
        run: USE_COVERAGE=1 make pytest-both-exes
      - name: Run wheel tests
        run: USE_COVERAGE=1 make pytest-wheel
      - name: Run distribution tests
        run: USE_COVERAGE=1 make pytest-app
      - name: Report coverage
        run: make report-coverage
      - name: Copy scripts into the package
        run: |
          cp utils/build/windows/remove_pycache.py ChimeraX.app/bin/
      - name: Sign the Windows Package
        uses: ./utils/ci/sign_windows
        with:
          build_certificate: ${{ secrets.WINDOWS_SIGNING_CERT }}
          cert_password: ${{ secrets.WINDOWS_SIGNING_PASS }}
      - name: Upload ChimeraX
        uses: nick-fields/retry@v3
        with:
          # You're gonna do it until you succeed, <REDACTED>! I'm not watching one more build fail because
          # GitHub Actions couldn't contact Plato.
          max_attempts: 1000 
          timeout_minutes: 60
          command: BUILD_COMMIT=$(git rev-parse --short $GITHUB_SHA) BUILD_DATE=$(git show $(git rev-parse $GITHUB_SHA) --no-patch --no-notes --pretty='%cd' | date -u) curl -v -F "key=${{ secrets.PREBUILT_CACHE_SECRET }}" -F "commit=$BUILD_COMMIT" -F "date=$BUILD_DATE" -F "platform=windows" -F "build_type=${{ inputs.release_type }}" -F "file=@$GITHUB_WORKSPACE/chimerax-installer.exe" https://preview.rbvi.ucsf.edu/chimerax/cgi-bin/upload_build.py
